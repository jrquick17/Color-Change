{"version":3,"names":[],"mappings":"","sources":["color-of-time.bundle.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n(function () {\n    'use strict';\n})();\n(function () {\n    'use strict';\n\n    angular.module('color-of-time', []);\n})();\n(function () {\n    'use strict';\n\n    angular.module('color-of-time').controller('ColorOfTimeController', ColorOfTimeController);\n\n    ColorOfTimeController.$inject = ['ColorOfTimeService', 'DefaultService', '$element', '$scope'];\n\n    function ColorOfTimeController(ColorOfTimeService, DefaultService, $element, $scope) {\n        var ColorOfTimeController = this;\n\n        ColorOfTimeController.args = [];\n\n        $scope.$watch('increment', function (increment) {\n            ColorOfTimeController.args['increment'] = DefaultService.get(increment, 1);\n        });\n\n        $scope.$watch('skip', function (skip) {\n            ColorOfTimeController.args['skip'] = DefaultService.get(skip, 0);\n        });\n\n        $scope.$watch('style', function (style) {\n            ColorOfTimeController.args['style'] = DefaultService.get(style, 'background-color');\n        });\n\n        $scope.$watch(function () {\n            return ColorOfTimeService.getColor(ColorOfTimeController.args);\n        }, function (color) {\n            ColorOfTimeController.color = color;\n        });\n\n        ColorOfTimeController.reset = reset;\n        function reset() {\n            ColorOfTimeController.color = '#FFFFFF';\n        }\n\n        ColorOfTimeController.init = init;\n        function init() {\n            ColorOfTimeController.reset();\n        }\n\n        ColorOfTimeController.init();\n    }\n})();\n(function () {\n    'use strict';\n\n    angular.module('color-of-time').directive('colorOfTime', colorOfTime);\n\n    colorOfTime.$inject = ['ColorOfTimeService', 'DefaultService'];\n\n    function colorOfTime(ColorOfTimeService, DefaultService) {\n        return {\n            restrict: 'AE',\n            replace: true,\n            scope: {\n                increment: '=',\n                skip: '=',\n                style: '='\n            },\n            link: function (scope, elem, attrs) {\n                var styles = DefaultService.get(scope.style, 'background-color').split(',');\n\n                var stylesCount = styles.length;\n                for (var i = 0; i < stylesCount; i++) {\n                    var style = styles[i];\n\n                    elem.css(style, ColorOfTimeService.getColor(scope));\n                }\n            }\n        };\n    }\n})();\n(function () {\n    'use strict';\n\n    angular.module('color-of-time').service('ColorOfTimeService', ColorOfTimeService);\n\n    ColorOfTimeService.$inject = ['DefaultService'];\n\n    function ColorOfTimeService(DefaultService) {\n        var SECONDS_PER_DAY = 86400;\n\n        var ColorOfTimeService = this;\n\n        ColorOfTimeService.getColor = function (args) {\n            var remainingPercent = ColorOfTimeService._getRemainingDayPercent(args);\n\n            return ColorOfTimeService._getColorPercent(remainingPercent);\n        };\n\n        ColorOfTimeService._getColorPercent = _getColorPercent;\n        function _getColorPercent(percent) {\n            var red = 0;\n            var green = 0;\n            var blue = 0;\n\n            if (percent < 0.17) {\n                red = 1;\n                green = percent / 0.17;\n                blue = 0;\n            } else if (percent < 0.34) {\n                red = 1 - (percent - 0.17) / 0.17;\n                green = 1;\n                blue = 0;\n            } else if (percent < 0.51) {\n                red = 0;\n                green = 1;\n                blue = (percent - 0.34) / 0.17;\n            } else if (percent < 0.68) {\n                red = 0;\n                green = 1 - (percent - 0.51) / 0.17;\n                blue = 1;\n            } else if (percent < 0.85) {\n                red = (percent - 0.68) / 0.17;\n                green = 0;\n                blue = 1;\n            } else if (percent <= 1) {\n                red = 1;\n                green = 0;\n                blue = 1 - (percent - 0.85) / 0.15;\n            }\n\n            return ColorOfTimeService._toHexadecimal(red, blue, green);\n        }\n\n        ColorOfTimeService._getRemainingDayPercent = _getRemainingDayPercent;\n        function _getRemainingDayPercent(args) {\n            var increment = DefaultService.get(args.increment, 1);\n\n            var skip = DefaultService.get(args.skip, 0);\n\n            var date = new Date();\n\n            var minutes = date.getHours() * 60;\n            var seconds = date.getMinutes() * 60 + minutes;\n\n            seconds += date.getSeconds();\n            seconds *= increment;\n\n            if (typeof skip === 'number') {\n                seconds += skip;\n            }\n\n            if (seconds > SECONDS_PER_DAY) {\n                seconds -= SECONDS_PER_DAY;\n            }\n\n            var percent = seconds / SECONDS_PER_DAY;\n\n            return percent % 1;\n        }\n\n        ColorOfTimeService._toHexadecimal = _toHexadecimal;\n        function _toHexadecimal(red, blue, green) {\n            red = _to255(red, blue, green);\n            green = _to255(green);\n            blue = _to255(blue);\n\n            if (red.length === 1) {\n                red = \"0\".concat(red);\n            }\n            if (green.length === 1) {\n                green = \"0\".concat(green);\n            }\n            if (blue.length === 1) {\n                blue = \"0\".concat(blue);\n            }\n\n            return \"#\" + red.concat(green).concat(blue).toUpperCase();\n        }\n\n        ColorOfTimeService._to255 = _to255;\n        function _to255(value) {\n            return Math.floor(value * 255).toString(16);\n        }\n    }\n})();\n(function () {\n    'use strict';\n\n    angular.module('color-of-time').service('DefaultService', DefaultService);\n\n    function DefaultService() {\n        var DefaultService = this;\n\n        DefaultService.get = get;\n        function get(alpha, beta) {\n            if (typeof alpha !== 'undefined') {\n                return alpha;\n            } else if (typeof beta !== 'undefined') {\n                return beta;\n            } else {\n                return false;\n            }\n        }\n    }\n})();\n\n},{}]},{},[1]);\n"],"file":"color-of-time.bundle.js"}