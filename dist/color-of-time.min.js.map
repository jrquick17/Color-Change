{"version":3,"sources":["color-of-time.min.js"],"names":["angular","module","ColorOfTimeController","ColorOfTimeService","$scope","color","$watch","getColor","this","controller","$inject","colorOfTime","restrict","replace","link","scope","elem","attrs","css","directive","service","speed","date","Date","hour","getHours","getMinutes","getSeconds","red","green","blue","Math","floor","toString","length","concat","toUpperCase"],"mappings":"CAAA,WACI,aAEAA,QAAQC,OAAO,qBAHnB,GAKA,WACI,aAYA,SAASC,EACLC,EACAC,GAGAA,EAAOC,MAAQ,UAEfD,EAAOE,OACH,WACI,OAAOH,EAAmBI,SAAS,IAEvC,SAAUF,GACND,EAAOC,MAAQA,IASvBG,KAAKD,SAAW,WACZ,OAAOH,EAAOC,OAhCtBL,QAAQC,OAAO,kBAAkBQ,WAC7B,wBACAP,GAGJA,EAAsBQ,SAClB,qBACA,UAVR,GAuCA,WACI,aAQA,SAASC,EACLR,GAEA,OACIS,SAAU,KACVC,SAAS,EACTC,KAAM,SAASC,EAAOC,EAAMC,GACxBD,EAAKE,IAAI,mBAAoBf,EAAmBI,cAb5DP,QAAQC,OAAO,kBAAkBkB,UAAU,cAAeR,GAE1DA,EAAYD,SACR,sBANR,GAqBA,WACI,aAEAV,QAAQC,OAAO,kBAAkBmB,QAAQ,qBAEzC,WAC6BZ,KAEND,SAAW,SAAUc,QACf,IAAVA,IACPA,EAAQ,GAIZ,IAAIC,EAAO,IAAIC,KACXC,GAA0B,GAAlBF,EAAKG,WAAkB,GAAyB,GAApBH,EAAKI,aAAoBJ,EAAKK,cAAgB,MAIlFC,EAAM,EACNC,EAAQ,EACRC,EAAO,EAyCX,OA9CAN,EAAOA,EAAOH,EAAQ,GAMX,KACPO,EAAM,EACNC,EAAQL,EAAO,IACfM,EAAO,GACAN,EAAO,KACdI,EAAM,GAAMJ,EAAO,KAAO,IAC1BK,EAAQ,EACRC,EAAO,GACAN,EAAO,KACdI,EAAM,EACNC,EAAQ,EACRC,GAAQN,EAAO,KAAO,KACfA,EAAO,KACdI,EAAM,EACNC,EAAQ,GAAML,EAAO,KAAO,IAC5BM,EAAO,GACAN,EAAO,KACdI,GAAOJ,EAAO,KAAO,IACrBK,EAAQ,EACRC,EAAO,GACAN,GAAQ,IACfI,EAAM,EACNC,EAAQ,EACRC,EAAO,GAAMN,EAAO,KAAO,KAI/BI,EAAMG,KAAKC,MAAY,IAANJ,GAAWK,SAAS,IACrCJ,EAAQE,KAAKC,MAAc,IAARH,GAAaI,SAAS,IACzCH,EAAOC,KAAKC,MAAa,IAAPF,GAAYG,SAAS,IACrB,GAAdL,EAAIM,SACJN,EAAM,IAAIO,OAAOP,IAED,GAAhBC,EAAMK,SACNL,EAAQ,IAAIM,OAAON,IAEJ,GAAfC,EAAKI,SACLJ,EAAO,IAAIK,OAAOL,IAGf,IAAMF,EAAIO,OAAON,GAAOM,OAAOL,GAAMM,iBA9DxD","file":"color-of-time.min.js","sourcesContent":["(function() {\n    'use strict';\n\n    angular.module('ColorOfTimeApp', []);\n})();\n(function() {\n    'use strict';\n\n    angular.module('ColorOfTimeApp').controller(\n        'ColorOfTimeController',\n        ColorOfTimeController\n    );\n\n    ColorOfTimeController.$inject = [\n        'ColorOfTimeService',\n        '$scope'\n    ];\n\n    function ColorOfTimeController(\n        ColorOfTimeService,\n        $scope\n    ) {\n\n        $scope.color = '#FFFFFF';\n\n        $scope.$watch(\n            function () {\n                return ColorOfTimeService.getColor(1);\n            },\n            function (color) {\n                $scope.color = color;\n            }\n        );\n\n        /**\n         * Get the current time's color\n         *\n         * @returns {string|*}\n         */\n        this.getColor = function () {\n            return $scope.color;\n        }\n    }\n})();\n(function() {\n    'use strict';\n\n    angular.module('ColorOfTimeApp').directive('colorOfTime', colorOfTime);\n\n    colorOfTime.$inject = [\n        'ColorOfTimeService'\n    ];\n\n    function colorOfTime(\n        ColorOfTimeService\n    ) {\n        return {\n            restrict: 'AE',\n            replace: true,\n            link: function(scope, elem, attrs) {\n                elem.css(\"background-color\", ColorOfTimeService.getColor());\n            }\n        };\n    }\n})();\n(function() {\n    'use strict';\n\n    angular.module('ColorOfTimeApp').service('ColorOfTimeService', ColorOfTimeService);\n\n    function ColorOfTimeService() {\n        var ColorOfTimeService = this;\n\n        ColorOfTimeService.getColor = function (speed) {\n            if (typeof speed === 'undefined') {\n                speed = 1;\n            }\n\n            //Calculate % of day already passed\n            var date = new Date();\n            var hour = (date.getHours() * 60 * 60 + date.getMinutes() * 60 + date.getSeconds()) / 86400;\n            hour = hour * speed % 1;\n\n            //Calculate color value [0-255] based on the time\n            var red = 0;\n            var green = 0;\n            var blue = 0;\n            if (hour < .17) {\n                red = 1;\n                green = hour / .17;\n                blue = 0;\n            } else if (hour < .34) {\n                red = 1 - ((hour - .17) / .17);\n                green = 1;\n                blue = 0;\n            } else if (hour < .51) {\n                red = 0;\n                green = 1;\n                blue = (hour - .34) / .17;\n            } else if (hour < .68) {\n                red = 0;\n                green = 1 - ((hour - .51) / .17);\n                blue = 1;\n            } else if (hour < .85) {\n                red = (hour - .68) / .17;\n                green = 0;\n                blue = 1;\n            } else if (hour <= 1) {\n                red = 1;\n                green = 0;\n                blue = 1 - ((hour - .85) / .15);\n            }\n\n            //Convert color value [0-255] to hexadecimal\n            red = Math.floor(red * 255).toString(16);\n            green = Math.floor(green * 255).toString(16);\n            blue = Math.floor(blue * 255).toString(16);\n            if (red.length == 1) {\n                red = \"0\".concat(red);\n            }\n            if (green.length == 1) {\n                green = \"0\".concat(green);\n            }\n            if (blue.length == 1) {\n                blue = \"0\".concat(blue);\n            }\n\n            return \"#\" + red.concat(green).concat(blue).toUpperCase();\n        };\n    }\n})();"]}