{"version":3,"sources":["color-of-time.min.js"],"names":["angular","module","ColorOfTimeController","ColorOfTimeService","$scope","this","$watch","getColor","color","reset","init","controller","$inject","colorOfTime","restrict","replace","scope","style","link","elem","attrs","styles","split","stylesCount","length","i","css","directive","service","_to255","value","Math","floor","toString","remainingPercent","_getRemainingDayPercent","_getColorPercent","percent","red","green","blue","_toHexadecimal","date","Date","getHours","getMinutes","getSeconds","concat","toUpperCase"],"mappings":"CAAA,WACI,aAEAA,QAAQC,OAAO,gBAAiB,IAHpC,GAKA,WACI,aAYA,SAASC,EACLC,EACAC,GAEA,IAAIF,EAAwBG,KAE5BD,EAAOE,OACH,WACI,OAAOH,EAAmBI,SAAS,IAEvC,SAASC,GACLN,EAAsBM,MAAQA,IAItCN,EAAsBO,MACtB,WACIP,EAAsBM,MAAQ,WAGlCN,EAAsBQ,KACtB,WACIR,EAAsBO,SAG1BP,EAAsBQ,OAnC1BV,QAAQC,OAAO,iBAAiBU,WAC5B,wBACAT,GAGJA,EAAsBU,QAAU,CAC5B,qBACA,UAVR,GAyCA,WACI,aAQA,SAASC,EACLV,GAEA,MAAO,CACHW,SAAU,KACVC,SAAU,EACVC,MAAO,CACHC,MAAO,KAEXC,KAAM,SAASF,EAAOG,EAAMC,GACxB,IAAIC,EAAS,CACT,yBAGuB,IAAhBL,EAAMC,QACbI,EAASL,EAAMC,MAAMK,MAAM,MAI/B,IADA,IAAIC,EAAcF,EAAOG,OAChBC,EAAI,EAAGA,EAAIF,EAAaE,IAAK,CAClC,IAAIR,EAAQI,EAAOI,GAEnBN,EAAKO,IACDT,EACAd,EAAmBI,eA9BvCP,QAAQC,OAAO,iBAAiB0B,UAAU,cAAed,GAEzDA,EAAYD,QAAU,CAClB,sBANR,GAwCA,WACI,aAEAZ,QAAQC,OAAO,iBAAiB2B,QAAQ,qBAExC,WACI,IAAIzB,EAAqBE,KAwEzB,SAASwB,EAAOC,GACZ,OAAOC,KAAKC,MAAc,IAARF,GAAaG,SAAS,IAvE5C9B,EAAmBI,SAAW,WAC1B,IAAI2B,EAAmB/B,EAAmBgC,0BAE1C,OAAOhC,EAAmBiC,iBAAiBF,IAG/C/B,EAAmBiC,iBACnB,SAA0BC,GACtB,IAAIC,EAAM,EACNC,EAAQ,EACRC,EAAO,EAEPH,EAAU,KACVC,EAAM,EACNC,EAAQF,EAAU,IAClBG,EAAO,GACAH,EAAU,KACjBC,EAAM,GAAMD,EAAU,KAAQ,IAC9BE,EAAQ,EACRC,EAAO,GACAH,EAAU,KACjBC,EAAM,EACNC,EAAQ,EACRC,GAAQH,EAAU,KAAQ,KACnBA,EAAU,KACjBC,EAAM,EACNC,EAAQ,GAAMF,EAAU,KAAQ,IAChCG,EAAO,GACAH,EAAU,KACjBC,GAAOD,EAAU,KAAQ,IACzBE,EAAQ,EACRC,EAAO,GACAH,GAAW,IAElBE,EAAQ,EACRC,GAFAF,EAAM,IAEOD,EAAU,KAAQ,KAGnC,OAAOlC,EAAmBsC,eAAeH,EAAKE,EAAMD,IAGxDpC,EAAmBgC,wBACnB,WACI,IAAIO,EAAO,IAAIC,KAIf,OAF8B,GAAlBD,EAAKE,WAAkB,GAAyB,GAApBF,EAAKG,aAAoBH,EAAKI,cAAgB,MAExE,GAGlB3C,EAAmBsC,eACnB,SAAwBH,EAAKE,EAAMD,GAC/BD,EAAMT,EAAOS,GACbC,EAAQV,EAAOU,GACfC,EAAOX,EAAOW,GAEK,IAAfF,EAAId,SACJc,EAAM,IAAIS,OAAOT,IAEA,IAAjBC,EAAMf,SACNe,EAAQ,IAAIQ,OAAOR,IAEH,IAAhBC,EAAKhB,SACLgB,EAAO,IAAIO,OAAOP,IAGtB,MAAO,IAAMF,EAAIS,OAAOR,GAAOQ,OAAOP,GAAMQ,eAGhD7C,EAAmB0B,OAASA,IA7EpC","file":"color-of-time.min.js","sourcesContent":["(function() {\n    'use strict';\n\n    angular.module('color-of-time', []);\n})();\n(function() {\n    'use strict';\n\n    angular.module('color-of-time').controller(\n        'ColorOfTimeController',\n        ColorOfTimeController\n    );\n\n    ColorOfTimeController.$inject = [\n        'ColorOfTimeService',\n        '$scope'\n    ];\n\n    function ColorOfTimeController(\n        ColorOfTimeService,\n        $scope\n    ) {\n        var ColorOfTimeController = this;\n\n        $scope.$watch(\n            function() {\n                return ColorOfTimeService.getColor(1);\n            },\n            function(color) {\n                ColorOfTimeController.color = color;\n            }\n        );\n\n        ColorOfTimeController.reset = reset;\n        function reset() {\n            ColorOfTimeController.color = '#FFFFFF';\n        }\n\n        ColorOfTimeController.init = init;\n        function init() {\n            ColorOfTimeController.reset();\n        }\n\n        ColorOfTimeController.init();\n    }\n})();\n(function() {\n    'use strict';\n\n    angular.module('color-of-time').directive('colorOfTime', colorOfTime);\n\n    colorOfTime.$inject = [\n        'ColorOfTimeService'\n    ];\n\n    function colorOfTime(\n        ColorOfTimeService\n    ) {\n        return {\n            restrict: 'AE',\n            replace:  true,\n            scope: {\n                style: '='\n            },\n            link: function(scope, elem, attrs) {\n                var styles = [\n                    'background-color'\n                ];\n\n                if (typeof scope.style !== 'undefined') {\n                    styles = scope.style.split(',');\n                }\n\n                var stylesCount = styles.length;\n                for (var i = 0; i < stylesCount; i++) {\n                    var style = styles[i];\n\n                    elem.css(\n                        style,\n                        ColorOfTimeService.getColor()\n                    );\n                }\n            }\n        };\n    }\n})();\n(function() {\n    'use strict';\n\n    angular.module('color-of-time').service('ColorOfTimeService', ColorOfTimeService);\n\n    function ColorOfTimeService() {\n        var ColorOfTimeService = this;\n\n        ColorOfTimeService.getColor = function() {\n            var remainingPercent = ColorOfTimeService._getRemainingDayPercent();\n\n            return ColorOfTimeService._getColorPercent(remainingPercent);\n        };\n\n        ColorOfTimeService._getColorPercent = _getColorPercent;\n        function _getColorPercent(percent) {\n            var red = 0;\n            var green = 0;\n            var blue = 0;\n\n            if (percent < 0.17) {\n                red = 1;\n                green = percent / 0.17;\n                blue = 0;\n            } else if (percent < 0.34) {\n                red = 1 - ((percent - 0.17) / 0.17);\n                green = 1;\n                blue = 0;\n            } else if (percent < 0.51) {\n                red = 0;\n                green = 1;\n                blue = (percent - 0.34) / 0.17;\n            } else if (percent < 0.68) {\n                red = 0;\n                green = 1 - ((percent - 0.51) / 0.17);\n                blue = 1;\n            } else if (percent < 0.85) {\n                red = (percent - 0.68) / 0.17;\n                green = 0;\n                blue = 1;\n            } else if (percent <= 1) {\n                red = 1;\n                green = 0;\n                blue = 1 - ((percent - 0.85) / 0.15);\n            }\n\n            return ColorOfTimeService._toHexadecimal(red, blue, green);\n        }\n\n        ColorOfTimeService._getRemainingDayPercent = _getRemainingDayPercent;\n        function _getRemainingDayPercent() {\n            var date = new Date();\n\n            var hour = (date.getHours() * 60 * 60 + date.getMinutes() * 60 + date.getSeconds()) / 86400;\n\n            return hour % 1;\n        }\n\n        ColorOfTimeService._toHexadecimal = _toHexadecimal;\n        function _toHexadecimal(red, blue, green) {\n            red = _to255(red, blue, green);\n            green = _to255(green);\n            blue = _to255(blue);\n\n            if (red.length === 1) {\n                red = \"0\".concat(red);\n            }\n            if (green.length === 1) {\n                green = \"0\".concat(green);\n            }\n            if (blue.length === 1) {\n                blue = \"0\".concat(blue);\n            }\n\n            return \"#\" + red.concat(green).concat(blue).toUpperCase();\n        }\n\n        ColorOfTimeService._to255 = _to255;\n        function _to255(value) {\n            return Math.floor(value * 255).toString(16);\n        }\n    }\n})();"]}