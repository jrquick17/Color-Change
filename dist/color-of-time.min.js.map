{"version":3,"sources":["color-of-time.min.js"],"names":["angular","module","ColorOfTimeController","ColorOfTimeService","DefaultService","$element","$scope","$interval","this","args","properties","$watch","increment","get","bind","split","rate","skip","getColor","color","setColor","propertiesCount","length","i","property","css","reset","init","controller","$inject","directive","controllerAs","restrict","replace","scope","template","SECONDS_PER_DAY","_to255","value","Math","floor","toString","remainingPercent","_getRemainingDayPercent","_getColorPercent","percent","red","green","blue","_toHexadecimal","date","Date","minutes","getHours","seconds","getMinutes","getSeconds","concat","toUpperCase","service","alpha","beta"],"mappings":"CAAA,WACI,aAEAA,QAAQC,OAAO,gBAAiB,IAHpC,GAKA,WACI,aAeA,SAASC,EACLC,EACAC,EACAC,EACAC,EACAC,GAEA,IAAIL,EAAwBM,KAE5BN,EAAsBO,KAAO,GAE7BP,EAAsBQ,WAAa,GAEnCJ,EAAOK,OACH,YACA,SAASC,GACLV,EAAsBO,KAAKG,UAAYR,EAAeS,IAAID,EAAW,IACvEE,KAAKZ,IAGXI,EAAOK,OACH,aACA,SAASD,GACLR,EAAsBQ,WAAaN,EAAeS,IAAIH,EAAY,oBAAoBK,MAAM,MAC9FD,KAAKZ,IAGXI,EAAOK,OACH,OACA,SAASK,GACLd,EAAsBc,KAAOZ,EAAeS,IAAIG,EAAM,MACxDF,KAAKZ,IAGXI,EAAOK,OACH,OACA,SAASM,GACLf,EAAsBO,KAAKQ,KAAOb,EAAeS,IAAII,EAAM,IAC7DH,KAAKZ,IAGXK,EACI,WACIL,EAAsBgB,YAE1BhB,EAAsBc,MAG1Bd,EAAsBgB,SACtB,WACI,IAAIC,EAAQhB,EAAmBe,SAC3BhB,EAAsBO,MAK1B,OAFAP,EAAsBkB,SAASD,GAExBA,GAGXjB,EAAsBkB,SACtB,SAAkBD,GACdjB,EAAsBiB,MAAQA,EAG9B,IADA,IAAIE,EAAkBnB,EAAsBQ,WAAWY,OAC9CC,EAAI,EAAGA,EAAIF,EAAiBE,IAAK,CACtC,IAAIC,EAAWtB,EAAsBQ,WAAWa,GAEhDlB,EAASoB,IAAID,EAAUtB,EAAsBiB,SAIrDjB,EAAsBwB,MACtB,WACIxB,EAAsBiB,MAAQ,WAGlCjB,EAAsByB,KACtB,WACIzB,EAAsBwB,SAG1BxB,EAAsByB,OA9F1B3B,QAAQC,OAAO,iBAAiB2B,WAC5B,wBACA1B,GAGJA,EAAsB2B,QAAU,CAC5B,qBACA,iBACA,WACA,SACA,aAbR,GAoGA,WACI,aAEA7B,QAAQC,OAAO,iBAAiB6B,UAAU,cAE1C,WACI,MAAO,CACHF,WAAY,wBACZG,aAAc,OACdC,SAAU,KACVC,SAAU,EACVC,MAAO,CACHtB,UAAY,IACZI,KAAY,IACZN,WAAY,IACZO,KAAY,KAEhBkB,SAAU,MAjBtB,GAqBA,WACI,aAQA,SAAShC,EACLC,GAEA,IAAIgC,EAAkB,MAElBjC,EAAqBK,KAmGzB,SAAS6B,EAAOC,GACZ,OAAOC,KAAKC,MAAc,IAARF,GAAaG,SAAS,IAlG5CtC,EAAmBe,SAAW,SAAST,GACnC,IAAIiC,EAAmBvC,EAAmBwC,wBAAwBlC,GAElE,OAAON,EAAmByC,iBAAiBF,IAG/CvC,EAAmByC,iBACnB,SAA0BC,GACtB,IAAIC,EAAM,EACNC,EAAQ,EACRC,EAAO,EAEPH,EAAU,KACVC,EAAM,EACNC,EAAQF,EAAU,IAClBG,EAAO,GACAH,EAAU,KACjBC,EAAM,GAAMD,EAAU,KAAQ,IAC9BE,EAAQ,EACRC,EAAO,GACAH,EAAU,KACjBC,EAAM,EACNC,EAAQ,EACRC,GAAQH,EAAU,KAAQ,KACnBA,EAAU,KACjBC,EAAM,EACNC,EAAQ,GAAMF,EAAU,KAAQ,IAChCG,EAAO,GACAH,EAAU,KACjBC,GAAOD,EAAU,KAAQ,IACzBE,EAAQ,EACRC,EAAO,GACAH,GAAW,IAElBE,EAAQ,EACRC,GAFAF,EAAM,IAEOD,EAAU,KAAQ,KAGnC,OAAO1C,EAAmB8C,eAAeH,EAAKE,EAAMD,IAGxD5C,EAAmBwC,wBACnB,SAAiClC,GAC7B,IAAIG,EAAYR,EAAeS,IAC3BJ,EAAKG,UACL,GAGAK,EAAOb,EAAeS,IACtBJ,EAAKQ,KACL,GAGAiC,EAAO,IAAIC,KAIXC,EAAkB,GAFVF,EAAKG,WAKbC,EAAoB,IAFxBF,GAAWF,EAAKK,cAGhBD,GAAWJ,EAAKM,aAChBF,GAAW1C,EAES,iBAATK,IACPqC,GAAWrC,GAGDmB,EAAVkB,IACAA,GAAWlB,GAKf,OAFckB,EAAUlB,EAEP,GAGrBjC,EAAmB8C,eACnB,SAAwBH,EAAKE,EAAMD,GAC/BD,EAAMT,EAAOS,GACbC,EAAQV,EAAOU,GACfC,EAAOX,EAAOW,GAEK,IAAfF,EAAIxB,SACJwB,EAAM,IAAIW,OAAOX,IAEA,IAAjBC,EAAMzB,SACNyB,EAAQ,IAAIU,OAAOV,IAEH,IAAhBC,EAAK1B,SACL0B,EAAO,IAAIS,OAAOT,IAGtB,MAAO,IAAMF,EAAIW,OAAOV,GAAOU,OAAOT,GAAMU,eAGhDvD,EAAmBkC,OAASA,EA7GhCrC,QAAQC,OAAO,iBAAiB0D,QAAQ,qBAAsBxD,GAE9DA,EAAmB0B,QAAU,CACzB,kBANR,GAsHA,WACI,aAEA7B,QAAQC,OAAO,iBAAiB0D,QAAQ,iBAExC,WACyBnD,KAENK,IACf,SAAa+C,EAAOC,GAChB,YAAqB,IAAVD,EACAA,OACgB,IAATC,GACPA,KAbvB","file":"color-of-time.min.js","sourcesContent":["(function() {\n    'use strict';\n\n    angular.module('color-of-time', []);\n})();\n(function() {\n    'use strict';\n\n    angular.module('color-of-time').controller(\n        'ColorOfTimeController',\n        ColorOfTimeController\n    );\n\n    ColorOfTimeController.$inject = [\n        'ColorOfTimeService',\n        'DefaultService',\n        '$element',\n        '$scope',\n        '$interval'\n    ];\n\n    function ColorOfTimeController(\n        ColorOfTimeService,\n        DefaultService,\n        $element,\n        $scope,\n        $interval\n    ) {\n        var ColorOfTimeController = this;\n\n        ColorOfTimeController.args = {};\n\n        ColorOfTimeController.properties = '';\n\n        $scope.$watch(\n            'increment',\n            function(increment) {\n                ColorOfTimeController.args.increment = DefaultService.get(increment, 1);\n            }.bind(ColorOfTimeController)\n        );\n\n        $scope.$watch(\n            'properties',\n            function(properties) {\n                ColorOfTimeController.properties = DefaultService.get(properties, 'background-color').split(',');\n            }.bind(ColorOfTimeController)\n        );\n\n        $scope.$watch(\n            'rate',\n            function(rate) {\n                ColorOfTimeController.rate = DefaultService.get(rate, 1000);\n            }.bind(ColorOfTimeController)\n        );\n\n        $scope.$watch(\n            'skip',\n            function(skip) {\n                ColorOfTimeController.args.skip = DefaultService.get(skip, 0);\n            }.bind(ColorOfTimeController)\n        );\n\n        $interval(\n            function() {\n                ColorOfTimeController.getColor();\n            },\n            ColorOfTimeController.rate\n        );\n\n        ColorOfTimeController.getColor = getColor;\n        function getColor() {\n            var color = ColorOfTimeService.getColor(\n                ColorOfTimeController.args\n            );\n\n            ColorOfTimeController.setColor(color);\n\n            return color;\n        }\n\n        ColorOfTimeController.setColor = setColor;\n        function setColor(color) {\n            ColorOfTimeController.color = color;\n\n            var propertiesCount = ColorOfTimeController.properties.length;\n            for (var i = 0; i < propertiesCount; i++) {\n                var property = ColorOfTimeController.properties[i];\n\n                $element.css(property, ColorOfTimeController.color);\n            }\n        }\n\n        ColorOfTimeController.reset = reset;\n        function reset() {\n            ColorOfTimeController.color = '#FFFFFF';\n        }\n\n        ColorOfTimeController.init = init;\n        function init() {\n            ColorOfTimeController.reset();\n        }\n\n        ColorOfTimeController.init();\n    }\n})();\n(function() {\n    'use strict';\n\n    angular.module('color-of-time').directive('colorOfTime', colorOfTime);\n\n    function colorOfTime() {\n        return {\n            controller: 'ColorOfTimeController',\n            controllerAs: 'ctrl',\n            restrict: 'AE',\n            replace:  false,\n            scope: {\n                increment:  '=',\n                rate:       '=',\n                properties: '=',\n                skip:       '='\n            },\n            template: ''\n        };\n    }\n})();\n(function() {\n    'use strict';\n\n    angular.module('color-of-time').service('ColorOfTimeService', ColorOfTimeService);\n\n    ColorOfTimeService.$inject = [\n        'DefaultService'\n    ];\n\n    function ColorOfTimeService(\n        DefaultService\n    ) {\n        var SECONDS_PER_DAY = 86400;\n\n        var ColorOfTimeService = this;\n\n        ColorOfTimeService.getColor = function(args) {\n            var remainingPercent = ColorOfTimeService._getRemainingDayPercent(args);\n\n            return ColorOfTimeService._getColorPercent(remainingPercent);\n        };\n\n        ColorOfTimeService._getColorPercent = _getColorPercent;\n        function _getColorPercent(percent) {\n            var red = 0;\n            var green = 0;\n            var blue = 0;\n\n            if (percent < 0.17) {\n                red = 1;\n                green = percent / 0.17;\n                blue = 0;\n            } else if (percent < 0.34) {\n                red = 1 - ((percent - 0.17) / 0.17);\n                green = 1;\n                blue = 0;\n            } else if (percent < 0.51) {\n                red = 0;\n                green = 1;\n                blue = (percent - 0.34) / 0.17;\n            } else if (percent < 0.68) {\n                red = 0;\n                green = 1 - ((percent - 0.51) / 0.17);\n                blue = 1;\n            } else if (percent < 0.85) {\n                red = (percent - 0.68) / 0.17;\n                green = 0;\n                blue = 1;\n            } else if (percent <= 1) {\n                red = 1;\n                green = 0;\n                blue = 1 - ((percent - 0.85) / 0.15);\n            }\n\n            return ColorOfTimeService._toHexadecimal(red, blue, green);\n        }\n\n        ColorOfTimeService._getRemainingDayPercent = _getRemainingDayPercent;\n        function _getRemainingDayPercent(args) {\n            var increment = DefaultService.get(\n                args.increment,\n                1\n            );\n\n            var skip = DefaultService.get(\n                args.skip,\n                0\n            );\n\n            var date = new Date();\n\n            var hours = date.getHours();\n\n            var minutes = hours * 60;\n            minutes += date.getMinutes();\n\n            var seconds = minutes * 60;\n            seconds += date.getSeconds();\n            seconds *= increment;\n\n            if (typeof skip === 'number') {\n                seconds += skip;\n            }\n\n            if (seconds > SECONDS_PER_DAY) {\n                seconds -= SECONDS_PER_DAY;\n            }\n\n            var percent = seconds / SECONDS_PER_DAY;\n\n            return percent % 1;\n        }\n\n        ColorOfTimeService._toHexadecimal = _toHexadecimal;\n        function _toHexadecimal(red, blue, green) {\n            red = _to255(red, blue, green);\n            green = _to255(green);\n            blue = _to255(blue);\n\n            if (red.length === 1) {\n                red = \"0\".concat(red);\n            }\n            if (green.length === 1) {\n                green = \"0\".concat(green);\n            }\n            if (blue.length === 1) {\n                blue = \"0\".concat(blue);\n            }\n\n            return \"#\" + red.concat(green).concat(blue).toUpperCase();\n        }\n\n        ColorOfTimeService._to255 = _to255;\n        function _to255(value) {\n            return Math.floor(value * 255).toString(16);\n        }\n    }\n})();\n(function() {\n    'use strict';\n\n    angular.module('color-of-time').service('DefaultService', DefaultService);\n\n    function DefaultService() {\n        var DefaultService = this;\n\n        DefaultService.get = get;\n        function get(alpha, beta) {\n            if (typeof alpha !== 'undefined') {\n                return alpha;\n            } else if (typeof beta !== 'undefined') {\n                return beta;\n            } else {\n                return false;\n            }\n        }\n    }\n})();"]}