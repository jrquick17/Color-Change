{"version":3,"sources":["color-of-time.min.js"],"names":["angular","module","ColorOfTimeController","ColorOfTimeService","DefaultService","$element","$scope","this","args","$watch","increment","get","skip","style","getColor","color","reset","init","controller","$inject","colorOfTime","restrict","replace","scope","link","elem","attrs","styles","split","stylesCount","length","i","css","directive","SECONDS_PER_DAY","_to255","value","Math","floor","toString","remainingPercent","_getRemainingDayPercent","_getColorPercent","percent","red","green","blue","_toHexadecimal","date","Date","minutes","getHours","seconds","getMinutes","getSeconds","concat","toUpperCase","service","alpha","beta"],"mappings":"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","file":"color-of-time.min.js","sourcesContent":["(function() {\n    'use strict';\n\n    angular.module('color-of-time', []);\n})();\n(function() {\n    'use strict';\n\n    angular.module('color-of-time').controller(\n        'ColorOfTimeController',\n        ColorOfTimeController\n    );\n\n    ColorOfTimeController.$inject = [\n        'ColorOfTimeService',\n        'DefaultService',\n        '$element',\n        '$scope'\n    ];\n\n    function ColorOfTimeController(\n        ColorOfTimeService,\n        DefaultService,\n        $element,\n        $scope\n    ) {\n        var ColorOfTimeController = this;\n\n        ColorOfTimeController.args = [];\n\n        $scope.$watch(\n            'increment',\n            function(increment) {\n                ColorOfTimeController.args['increment'] = DefaultService.get(increment, 1);\n            }\n        );\n\n        $scope.$watch(\n            'skip',\n            function(skip) {\n                ColorOfTimeController.args['skip'] = DefaultService.get(skip, 0);\n            }\n        );\n\n        $scope.$watch(\n            'style',\n            function(style) {\n                ColorOfTimeController.args['style'] = DefaultService.get(style, 'background-color');\n            }\n        );\n\n        $scope.$watch(\n            function() {\n                return ColorOfTimeService.getColor(\n                    ColorOfTimeController.args\n                );\n            },\n            function(color) {\n                ColorOfTimeController.color = color;\n            }\n        );\n\n        ColorOfTimeController.reset = reset;\n        function reset() {\n            ColorOfTimeController.color = '#FFFFFF';\n        }\n\n        ColorOfTimeController.init = init;\n        function init() {\n            ColorOfTimeController.reset();\n        }\n\n        ColorOfTimeController.init();\n    }\n})();\n(function() {\n    'use strict';\n\n    angular.module('color-of-time').directive('colorOfTime', colorOfTime);\n\n    colorOfTime.$inject = [\n        'ColorOfTimeService',\n        'DefaultService'\n    ];\n\n    function colorOfTime(\n        ColorOfTimeService,\n        DefaultService\n    ) {\n        return {\n            restrict: 'AE',\n            replace:  true,\n            scope: {\n                increment: '=',\n                skip:      '=',\n                style:     '='\n            },\n            link: function(scope, elem, attrs) {\n                var styles = DefaultService.get(\n                    scope.style,\n                    'background-color'\n                ).split(',');\n\n                var stylesCount = styles.length;\n                for (var i = 0; i < stylesCount; i++) {\n                    var style = styles[i];\n\n                    elem.css(\n                        style,\n                        ColorOfTimeService.getColor(scope)\n                    );\n                }\n            }\n        };\n    }\n})();\n(function() {\n    'use strict';\n\n    angular.module('color-of-time').service('ColorOfTimeService', ColorOfTimeService);\n\n    ColorOfTimeService.$inject = [\n        'DefaultService'\n    ];\n\n    function ColorOfTimeService(\n        DefaultService\n    ) {\n        var SECONDS_PER_DAY = 86400;\n\n        var ColorOfTimeService = this;\n\n        ColorOfTimeService.getColor = function(args) {\n            var remainingPercent = ColorOfTimeService._getRemainingDayPercent(args);\n\n            return ColorOfTimeService._getColorPercent(remainingPercent);\n        };\n\n        ColorOfTimeService._getColorPercent = _getColorPercent;\n        function _getColorPercent(percent) {\n            var red = 0;\n            var green = 0;\n            var blue = 0;\n\n            if (percent < 0.17) {\n                red = 1;\n                green = percent / 0.17;\n                blue = 0;\n            } else if (percent < 0.34) {\n                red = 1 - ((percent - 0.17) / 0.17);\n                green = 1;\n                blue = 0;\n            } else if (percent < 0.51) {\n                red = 0;\n                green = 1;\n                blue = (percent - 0.34) / 0.17;\n            } else if (percent < 0.68) {\n                red = 0;\n                green = 1 - ((percent - 0.51) / 0.17);\n                blue = 1;\n            } else if (percent < 0.85) {\n                red = (percent - 0.68) / 0.17;\n                green = 0;\n                blue = 1;\n            } else if (percent <= 1) {\n                red = 1;\n                green = 0;\n                blue = 1 - ((percent - 0.85) / 0.15);\n            }\n\n            return ColorOfTimeService._toHexadecimal(red, blue, green);\n        }\n\n        ColorOfTimeService._getRemainingDayPercent = _getRemainingDayPercent;\n        function _getRemainingDayPercent(args) {\n            var increment = DefaultService.get(\n                args.increment,\n                1\n            );\n\n            var skip = DefaultService.get(\n                args.skip,\n                0\n            );\n\n            var date = new Date();\n\n            var minutes = date.getHours() * 60;\n            var seconds = date.getMinutes() * 60 + minutes;\n\n            seconds += date.getSeconds();\n            seconds *= increment;\n\n            if (typeof skip === 'number') {\n                seconds += skip;\n            }\n\n            if (seconds > SECONDS_PER_DAY) {\n                seconds -= SECONDS_PER_DAY;\n            }\n\n            var percent = seconds / SECONDS_PER_DAY;\n\n            return percent % 1;\n        }\n\n        ColorOfTimeService._toHexadecimal = _toHexadecimal;\n        function _toHexadecimal(red, blue, green) {\n            red = _to255(red, blue, green);\n            green = _to255(green);\n            blue = _to255(blue);\n\n            if (red.length === 1) {\n                red = \"0\".concat(red);\n            }\n            if (green.length === 1) {\n                green = \"0\".concat(green);\n            }\n            if (blue.length === 1) {\n                blue = \"0\".concat(blue);\n            }\n\n            return \"#\" + red.concat(green).concat(blue).toUpperCase();\n        }\n\n        ColorOfTimeService._to255 = _to255;\n        function _to255(value) {\n            return Math.floor(value * 255).toString(16);\n        }\n    }\n})();\n(function() {\n    'use strict';\n\n    angular.module('color-of-time').service('DefaultService', DefaultService);\n\n    function DefaultService() {\n        var DefaultService = this;\n\n        DefaultService.get = get;\n        function get(alpha, beta) {\n            if (typeof alpha !== 'undefined') {\n                return alpha;\n            } else if (typeof beta !== 'undefined') {\n                return beta;\n            } else {\n                return false;\n            }\n        }\n    }\n})();"]}